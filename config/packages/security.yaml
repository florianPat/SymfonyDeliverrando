security:
    encoders:
        App\Entity\User:
            algorithm: auto
        App\Entity\Customer:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
        customer_provider:
            entity:
                class: App\Entity\Customer
                property: email
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        deliverrandoCustomer:
            anonymous: lazy
            access_denied_handler: App\Security\AccessDeniedHandler
            provider: customer_provider
            request_matcher: App\Security\CustomerRequestMatcher
            guard:
                authenticators:
                    - App\Security\LoginCustomerFormAuthenticator
            logout:
                path: app_logout
                target: index
            remember_me:
                secret: '%kernel.secret'
                lifetime: 604800
                remember_me_parameter: 'customer_login_remember_me'
                token_provider: 'Symfony\Bridge\Doctrine\Security\RememberMe\DoctrineTokenProvider'
        main:
            anonymous: lazy
            access_denied_handler: App\Security\AccessDeniedHandler
            provider: app_user_provider
            guard:
                authenticators:
                    - App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                target: index
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
